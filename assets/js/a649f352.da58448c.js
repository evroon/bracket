"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[51],{2533:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>d});var r=t(4848),s=t(8453);const c={sidebar_position:2},o="Developing",a={id:"community/development",title:"Developing",description:"This guide explains how to run Bracket without Docker. They cover database setup, configuration and",source:"@site/docs/community/development.md",sourceDirName:"community",slug:"/community/development",permalink:"/docs/community/development",draft:!1,unlisted:!1,editUrl:"https://github.com/evroon/bracket/tree/master/docs/docs/community/development.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Contributing",permalink:"/docs/community/contributing"},next:{title:"API",permalink:"/docs/api"}},i={},d=[{value:"Database",id:"database",level:2},{value:"Running the frontend and backend",id:"running-the-frontend-and-backend",level:2},{value:"Frontend",id:"frontend",level:3},{value:"Backend",id:"backend",level:3},{value:"Alternative: running Bracket via process-compose",id:"alternative-running-bracket-via-process-compose",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"developing",children:"Developing"}),"\n",(0,r.jsxs)(n.p,{children:["This guide explains how to run Bracket without Docker. They cover database setup, configuration and\nhow to run the frontend and backend. If you quickly want to get up and running, please read\n",(0,r.jsx)(n.a,{href:"/docs/running-bracket/quickstart",children:"quickstart.md"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"database",children:"Database"}),"\n",(0,r.jsxs)(n.p,{children:["First create a ",(0,r.jsx)(n.code,{children:"bracket"})," cluster:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo pg_createcluster -u postgres -p 5532 13 bracket\npg_ctlcluster 13 bracket start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Subsequently, create a new ",(0,r.jsx)(n.code,{children:"bracket_dev"})," database. First connect via ",(0,r.jsx)(n.code,{children:"sudo -Hu postgres psql -p 5532"}),", and then run:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE USER bracket_dev WITH PASSWORD 'bracket_dev';\nCREATE DATABASE bracket_dev OWNER bracket_dev;\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can do the same but replace the user and database name with:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bracket_ci"}),": for running tests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bracket_prod"}),": for a production database"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The database URL can be specified per environment in the ",(0,r.jsx)(n.code,{children:".env"})," files (see\n",(0,r.jsx)(n.a,{href:"/docs/running-bracket/configuration",children:"config"}),")."]}),"\n",(0,r.jsx)(n.h2,{id:"running-the-frontend-and-backend",children:"Running the frontend and backend"}),"\n",(0,r.jsxs)(n.p,{children:["To run Bracket (frontend and backend) locally without Docker, one needs ",(0,r.jsx)(n.code,{children:"yarn"})," and ",(0,r.jsx)(n.code,{children:"pipenv"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The following starts the frontend and backend for local development in the root\ndirectory of Bracket:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"./run.sh\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If either the frontend or backend doesn't shut down correctly, you can run (on Linux)\n",(0,r.jsx)(n.code,{children:"killall gunicorn node"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["But ",(0,r.jsx)(n.strong,{children:"be careful"})," that this will also kill other gunicorn and node processes."]}),"\n",(0,r.jsx)(n.p,{children:"In case you want to run the frontend and backend yourself, see the following\ntwo sections."}),"\n",(0,r.jsx)(n.h3,{id:"frontend",children:"Frontend"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd frontend\nyarn run dev\n"})}),"\n",(0,r.jsx)(n.h3,{id:"backend",children:"Backend"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd backend\npipenv install -d\npipenv shell\n./run.sh\n"})}),"\n",(0,r.jsx)(n.h3,{id:"alternative-running-bracket-via-process-compose",children:"Alternative: running Bracket via process-compose"}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, you can use ",(0,r.jsx)(n.a,{href:"https://github.com/F1bonacc1/process-compose",children:"process-compose"})," to run\nthe app locally. It works similarly to docker-compose, except it works with non-containerized\napplications."]}),"\n",(0,r.jsxs)(n.p,{children:["Just install it according to the ",(0,r.jsx)(n.a,{href:"https://f1bonacc1.github.io/process-compose/installation/",children:"docs"}),"\nand then run:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"cp process-compose-example.yml process-compose.yml \nprocess-compose up -d\n"})}),"\n",(0,r.jsx)(n.p,{children:"Press CTRL + C (or F10) to exit."}),"\n",(0,r.jsxs)(n.p,{children:["You can adjust the config by editing ",(0,r.jsx)(n.code,{children:"process-compose.yml"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},c=r.createContext(s);function o(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);